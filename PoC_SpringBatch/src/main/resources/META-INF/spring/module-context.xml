<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<description>Example job to get you started. It provides a skeleton for a typical batch application.</description>
 	
 	<batch:job id="job1">
		<batch:step id="step1" next="step2" >			
			<batch:tasklet transaction-manager="transactionManager" start-limit="100" >
				<batch:chunk reader="reader" processor="processor" writer="writer" commit-interval="1" />
			</batch:tasklet>
		</batch:step>
		<batch:step id="step2"  >			
			<batch:tasklet ref="taskletJob"/>
		</batch:step>
	</batch:job> 
	
	<bean id="taskletJob" class="org.springframework.batch.core.step.tasklet.SystemCommandTasklet">
		<property name="command" value="cmd /c move C:\Trash\output.csv C:\Trash\tmp" />
		<property name="timeout" value="1000" />
	</bean>
	<!--bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="classpath:Saludos.txt" />
        <property name="lineMapper">
            <bean class="com.danone.batch.SaludoLineMapper" />
            <bean class="org.springframework.batch.item.file.mapping.PassThroughLineMapper" />
        </property>
    </bean-->
    
    <util:properties id="templateSaludos" location="classpath:saludos-i18n.properties" />

    <bean id="processor" class="com.danone.batch.SaludoItemProcessor">
        <property name="template" ref="templateSaludos" />
    </bean>
    
     <bean id="reader" class="org.springframework.batch.item.file.MultiResourceItemReader">
        <property name="resources" value="classpath:*.mat" />
        <property name="delegate" ref="fileReader" />
    </bean>
    
    <bean id="fileReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <!--property name="resource" value="classpath:Saludos.txt" /-->
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <!--bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="nombre,idioma" />
                    </bean-->
                    <bean class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
    					<property name="names" value="nombre,idioma" />
    					<property name="columns" value="1-3, 4-5" />
    					<property name="strict" value="false" />               
					</bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="saludoInputPrototype" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    
    <bean id="saludoInputPrototype" scope="prototype" class="com.danone.batch.SaludoInput"/>
    
    <!--bean id="writer" class="org.springframework.batch.item.file.FlatFileItemWriter">
        <property name="resource" value="file:C:/Trash/output.csv" />
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator" />
        </property>
    </bean-->
    
    <bean id="writer" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
		<property name="sql" value="insert into nimms_own.mn405d01 (ksh_guid, acct_id, local_stock_nbr, trn_date, std_ui, ACQN_CD, NOMEN, ERRC_CD, SOS) values (:kshGuid,:acctId,:localStockNbr, sysdate, :stdUi, :acqnCd, :nomen, :errcCd, :sos )" />	                           
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>
