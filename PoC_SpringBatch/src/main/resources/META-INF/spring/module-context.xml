<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<description>Example job to get you started. It provides a skeleton for
		a typical batch application.</description>

	<batch:job id="job1">
		<batch:step id="step1">
			<batch:tasklet transaction-manager="transactionManager"
				start-limit="100">
				<batch:chunk reader="reader" writer="writer" commit-interval="1" />
			</batch:tasklet>
			<batch:listeners>
			<batch:listener ref="listenerWirte"/>
			<batch:listener ref="listenerRead"/>
			<batch:listener ref="executionStep"/>
			<batch:listener ref="listenerChunk"/>
			</batch:listeners>
		</batch:step>
		<!--batch:step id="step2">
			<batch:tasklet ref="taskletJob" />
		</batch:step-->
	</batch:job>

	<bean id="listenerWirte" class="com.danone.batch.SaludoListenerWrite"/>
	<bean id="listenerRead" class="com.danone.batch.SaludoListenerRead"/>
	<bean id="executionStep" class="com.danone.batch.SaludoListenerExecution"/>
	<bean id="listenerChunk" class="com.danone.batch.SaludoListenerChunk"/>
	
	<!-- Spring Quartz -->
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="com.danone.batch.JobLauncherDetails" />
		<property name="group" value="quartz-batch" />
		<property name="jobDataAsMap">
			<map>
				<entry key="jobName" value="job1" />
				<entry key="jobLocator" value-ref="jobRegistry" />
				<entry key="jobLauncher" value-ref="jobLauncher" />
				<entry key="param1" value="lalo1" />
				<entry key="param2" value="lalo2" />
			</map>
		</property>
	</bean>
	
	<!-- Cron Trigger, run every 5 seconds -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="jobDetail" />
		<property name="cronExpression" value="0/5 * * * * ?" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
				<ref bean="cronTriggerOut" />
			</list>
		</property>
	</bean>

	<bean id="taskletJob"
		class="org.springframework.batch.core.step.tasklet.SystemCommandTasklet" scope="step">
		<property name="command">
			<value>
            <![CDATA[        
            cmd /c copy C:\interface_SAP_QS3\data\in\orderCreation\new\#{jobParameters['input.file']} C:\Trash\tmp & exit
            ]]>
			</value>
		</property>
		<property name="timeout" value="1000" />
	</bean>

	<!--bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:Saludos.txt" />
		<property name="lineMapper">
			<bean class="com.danone.batch.SaludoLineMapper" />
			<bean class="org.springframework.batch.item.file.mapping.PassThroughLineMapper" />
		</property>
	</bean-->

	<util:properties id="templateSaludos" location="classpath:saludos-i18n.properties" />

	<bean id="processor" class="com.danone.batch.SaludoItemProcessor">
		<property name="template" ref="templateSaludos" />
	</bean>

	<bean id="reader" class="org.springframework.batch.item.file.MultiResourceItemReader" scope="step">
		<property name="resources" value="file:C:/interface_SAP_QS3/data/in/orderCreation/new/*.txt" />
		<property name="delegate" ref="fileReader" />
		<property name="strict" value="false"/>
	</bean>

	<bean id="fileReader" class="com.danone.batch.FlatFileSaludo" scope="step">
	<property name="strict" value="false"/>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value=";"/> 
						<property name="names" value="nombre,idioma" /> 
					</bean>
					<!--bean
						class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
						<property name="names" value="nombre,idioma" />
						<property name="columns" value="1-3, 4-5" />
						<property name="strict" value="false" />
					</bean-->
				</property>
				<property name="fieldSetMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="saludoInputPrototype" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="saludoInputPrototype" scope="prototype" class="com.danone.batch.SaludoInput" />
	
	<bean id="writer"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
		<property name="sql">
			<value>
           	<![CDATA[        
		    INSERT INTO TEST1 VALUES(:nombre, :idioma)
           	]]>
			</value>
		</property>
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Start Reader -->

	<bean id="readerOut"
		class="org.springframework.batch.item.database.JdbcCursorItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
				<![CDATA[
				SELECT * FROM TEST1
				]]>
			</value>
		</property>
		<!--property name="preparedStatementSetter">
			<bean
				class="org.springframework.batch.core.resource.ListPreparedStatementSetter">
				<property name="parameters">
					<list>
						<value>#{jobParameters[propertyStr]}</value>
					</list>
				</property>
			</bean>
		</property-->
		<property name="rowMapper">
			<bean id="beneficiarioMapper" class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass">
					<value type="java.lang.Class">com.danone.batch.SaludoInput</value>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="writerOut" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:C:/interface_QS3_SAP/data/out/orderCreation/new/MX2QS3_orderCreation.csv" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.PassThroughLineAggregator" />
		</property>
	</bean>

	<bean id="processorOut" class="com.danone.batch.SaludoItemOutProcessor">
		<property name="template" ref="templateSaludos" />
	</bean>
	
	<batch:job id="job2">
		<batch:step id="step3">
			<batch:tasklet transaction-manager="transactionManager" start-limit="100">
				<batch:chunk reader="readerOut" processor="processorOut" writer="writerOut" commit-interval="1" />
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- Spring Quartz -->
	<bean id="jobDetailOut" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="com.danone.batch.JobLauncherDetails" />
		<property name="group" value="quartz-batch" />
		<property name="jobDataAsMap">
			<map>
				<entry key="jobName" value="job2" />
				<entry key="jobLocator" value-ref="jobRegistry" />
				<entry key="jobLauncher" value-ref="jobLauncher" />
				<entry key="propertyStr" value="ru" />
			</map>
		</property>
	</bean>
	
	<!-- Cron Trigger, run every 10 seconds -->
	<bean id="cronTriggerOut" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="jobDetailOut" />
		<property name="cronExpression" value="0/10 * * * * ?" />
	</bean>
	
</beans>
